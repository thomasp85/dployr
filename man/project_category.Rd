% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project_type.R
\name{project_category}
\alias{project_category}
\title{Get the main category of a project based on its type}
\usage{
project_category(type)
}
\arguments{
\item{type}{The type name of the project, as provided in the \code{Type} field of
the project
\subsection{Types and categories}{

producethis/dployr recognises three main project types:
\itemize{
\item \code{static}: The project is executed and as a result produces one or more
files which will subsequently be made availabe
\item \code{dynamic}: The project is executed and as a result starts a web server with
dynamic content
\item \code{batch}: The project is executed and is afterwards considered "finished".
If information is generated it needs to be stored somewhere else.
}

Inside these categories are a range of types that maps to specific runtimes
or execution engines. The project type is given in the \code{Type} field of the
\code{DESCRIPTION} file
\subsection{static}{
\itemize{
\item \code{quarto}: Used for a default quarto project. Will use
\code{quarto::quarto_render()} to render the content of \verb{exec/}
\item \code{report}: Used for a single quarto document. Will use
\code{quarto::quarto_render()} to render the \code{.qmd} file in \verb{exec/}
\item \code{website}: Used for a quarto website project. Will use
\code{quarto::quarto_render()} to render the content of \verb{exec/}
\item \code{blog}: Used for a quarto blog project. Will use
\code{quarto::quarto_render()} to render the content of \verb{exec/}
\item \code{book}: Used for a quarto book project. Will use
\code{quarto::quarto_render()} to render the content of \verb{exec/}
\item \code{manuscript}: Used for a quarto manuscript project. Will use
\code{quarto::quarto_render()} to render the content of \verb{exec/}
\item \code{rmd_report}: Used for a single RMarkdown document. Will use
\code{rmarkdown::render()} to render the \code{.Rmd} file in \verb{exec/}
\item \code{rmd_website} Used for general Rmarkdown websites. Will use
\code{rmarkdown::render_site()} to render the content of \verb{exec/}
\item \code{rmd_blog} Used for a blogdown project. Will use \code{blogdown::build_site()} to
render the content of \verb{exec/}
\item \code{rmd_book} Used for a bookdown project. Will use \code{bookdown::render_book()} to
render the content of \verb{exec/}
\item \code{static}: Used for a generalized static project. Will execute the R files
in \verb{exec/} and expect the content to be served to be placed according to
\code{distDir} in the deployment \link{config}
}
}

\subsection{dynamic}{
\itemize{
\item \code{shiny}: Used for a shiny app. Will use \code{shiny::shinyAppDir()} to create a
shiny app from \verb{exec/} and then launch it with \code{shiny::runApp()}
\item \code{plumber}: Used for a plumber API. Will use \code{plumber::plumb()} to create an
api from \verb{exec/} and launch it with \code{plumber::pr_run()}
\item \code{plumber2}: Used for a plumber2 API. Are treated like \code{api}/\code{app} in that
it requires a \verb{_server.yml} file that defines its execution
\item \code{dynamic}: Used for a generalized app or api. Will require a
\verb{_server.yml} file to specify how to launch it
\item \code{rmd_shiny}: Used for a shiny-backed Rmarkdown document. Will use
\code{rmarkdown::run()} to render and serve a dynamic document
\item \code{quarto_shiny}: Used for a shiny-backed Quarto document. Will use
\code{quarto::quarto_serve()} to render and serve a dynamic document.
}
}

\subsection{batch}{
\itemize{
\item \code{batch}: Batch project which will run each script in \verb{exec/} in turn and
then quit.
}
}

}}
}
\description{
Return the category assiciated with a given project type.
}
